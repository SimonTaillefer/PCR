L'objectif de cette thèse est la conception et l'implémentation d'un protocole à métaobjets adapté à la tolérance 
aux fautes d'objets Corba. En effet, il n'existe pas, à ce jour, de protocole à métaobjets satisfaisant dans ce 
contexte. Le protocole que nous définissons permet, d'une part, le contrôle du comportement et de l'état interne 
des objets Corba, et d'autre part, le contrôle des liens entre clients et serveur ainsi qu'entre objets et 
métaobjets, le tout de façon dynamique. L' implémentation proposée est adaptée à l'utilisation d'une plateforme 
Corba standard grâce à l'utilisation de langages ouverts et de réflexivité à la compilation : ces outils 
permettent de personnaliser le processus de compilation afin d'exhiber à l'exécution les informations nécessaires 
aux mécanismes de tolérance aux fautes. Un autre avantage de la réflexivité à la compilation est de permettre, de 
façon simple, d'assurer le respect de conventions de programmation grâce au filtrage du code source des 
applications. Ce protocole, bien intégré à Corba, tire également profit, lorsque c'est possible, des éléments 
réflexifs fournis par le support d'exécution du langage. C'est le cas avec Java, par exemple, qui permet la 
sérialisation des objets, grâce à ses aspects réflexifs limités. Lorsque le support du langage n'est pas 
réflexif, comme pour C++ par exemple, la réflexivité à la compilation permet également de mettre en oeuvre des 
techniques de sauvegarde et de restauration de l'état des objets ; état complet et état partiels peuvent être 
contrôlés par les métaobjets. Les différentes propriétés de ce protocole à métaobjets sont illustrées par une 
proposition d'architecture Corba permettant d'intégrer à l'application des mécansimes de tolérance aux fautes de 
manière très flexible. Les propriétés de cette approche sont une bonne séparation entre l'application et les 
mécanismes non-fonctionnels implémentés dans les métaobjets, l'aspect dynamique du lien entre objets et 
métaobjets, la composabilité et la réutilisation des mécanismes ainsi que la transparence pour l'utilisateur. 
Enfin, ce protocole à métaobjets est suffisamment générique pour tirer parti de l' ouverture, au sens de la 
réflexivité, des logiciels de base (système d'exploitation et middleware) de la plateforme.